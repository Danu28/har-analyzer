name: Documentation Build

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '**.md'
      - 'templates/**'
  workflow_dispatch:

jobs:
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create documentation directory
      run: |
        mkdir -p docs/{api,examples,stats}
    
    - name: Generate API documentation
      run: |
        echo "# HAR-ANALYZE API Documentation" > docs/api/README.md
        echo "" >> docs/api/README.md
        echo "Auto-generated API documentation for HAR-ANALYZE toolkit." >> docs/api/README.md
        echo "" >> docs/api/README.md
        echo "## Core Scripts" >> docs/api/README.md
        echo "" >> docs/api/README.md
        
        # Document each script
        for script in scripts/*.py; do
          if [[ -f "$script" && ! "$script" =~ __pycache__ ]]; then
            script_name=$(basename "$script" .py)
            echo "### $script_name" >> docs/api/README.md
            echo "" >> docs/api/README.md
            echo "\`\`\`python" >> docs/api/README.md
            head -20 "$script" | grep -E "^(def |class |\"\"\")" || echo "# Core analysis script" >> docs/api/README.md
            echo "\`\`\`" >> docs/api/README.md
            echo "" >> docs/api/README.md
          fi
        done
    
    - name: Generate usage examples
      run: |
        cat > docs/examples/README.md << 'EOF'
        # HAR-ANALYZE Usage Examples
        
        This directory contains comprehensive usage examples for all analysis workflows.
        
        ## Quick Start Examples
        
        ### Single File Analysis
        ```bash
        # Interactive demo with file selection
        python demo_single_file_report.py
        ```
        
        The demo will:
        1. List available HAR files in `HAR-Files/` directory
        2. Let you select one for analysis
        3. Generate a premium HTML report with performance metrics
        4. Open the report in your default browser
        
        ### Performance Comparison
        ```bash
        # Interactive comparison demo
        python demo_har_comparison.py
        ```
        
        The demo will:
        1. Let you select baseline HAR file
        2. Let you select target HAR file for comparison
        3. Generate side-by-side comparison report
        4. Highlight performance differences and regressions
        
        ### Multi-Run Analysis
        ```bash
        # Interactive multi-run demo
        python demo_multi_run_selector.py
        ```
        
        The demo will:
        1. Show available HAR files
        2. Let you select multiple files for analysis
        3. Generate executive summary report
        4. Show performance trends and statistical analysis
        
        ## Programmatic Usage
        
        ### Python Integration
        ```python
        import subprocess
        import json
        from pathlib import Path
        
        def analyze_har_file(har_path):
            """Analyze a HAR file and return results"""
            # Place HAR file in correct directory
            har_files_dir = Path("HAR-Files")
            har_files_dir.mkdir(exist_ok=True)
            
            # Copy file if not already there
            if not (har_files_dir / Path(har_path).name).exists():
                import shutil
                shutil.copy2(har_path, har_files_dir)
            
            # Run analysis
            result = subprocess.run([
                "python", "demo_single_file_report.py"
            ], capture_output=True, text=True)
            
            # Find generated analysis file
            analysis_files = list(Path("har_chunks").glob("*/agent_summary.json"))
            if analysis_files:
                with open(analysis_files[0]) as f:
                    return json.load(f)
            return None
        ```
        
        ### CI/CD Integration
        ```yaml
        # GitHub Actions example
        - name: Analyze HAR Performance
          run: |
            # Copy HAR file to analysis directory
            cp test-results/performance.har HAR-Files/
            
            # Run analysis
            python demo_single_file_report.py
            
            # Check performance grade
            python -c "
            import json
            from pathlib import Path
            
            analysis_files = list(Path('har_chunks').glob('*/agent_summary.json'))
            if analysis_files:
                with open(analysis_files[0]) as f:
                    data = json.load(f)
                    grade = data.get('performance_summary', {}).get('performance_grade', 'UNKNOWN')
                    print(f'Performance Grade: {grade}')
                    
                    if grade == 'CRITICAL':
                        exit(1)  # Fail the build
            "
        ```
        
        ## Advanced Configuration
        
        ### Custom Output Directories
        ```bash
        # Set custom directories via environment variables
        export HAR_CHUNKS_DIR="./custom_analysis"
        export HAR_REPORTS_DIR="./custom_reports"
        
        # Run analysis with custom paths
        python demo_single_file_report.py
        ```
        
        ### Template Customization
        ```python
        # Modify templates in templates/ directory
        # - har_single_premium.html (single file reports)
        # - har_comparison_side_by_side.html (comparison reports)
        # - har_multi_run_executive.html (multi-run reports)
        
        # Example: Add custom CSS
        with open('templates/har_single_premium.html', 'r') as f:
            template = f.read()
        
        # Add custom styling
        custom_css = """
        <style>
        .custom-branding {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            padding: 20px;
            border-radius: 10px;
        }
        </style>
        """
        
        template = template.replace('</head>', custom_css + '</head>')
        
        with open('templates/har_single_premium.html', 'w') as f:
            f.write(template)
        ```
        EOF
    
    - name: Generate project statistics
      run: |
        python -c "
        import os
        import json
        from datetime import datetime
        from pathlib import Path
        
        # Count project files and lines
        stats = {
            'generated_at': datetime.now().isoformat(),
            'project_name': 'HAR-ANALYZE',
            'version': '1.0.0',
            'files': {},
            'totals': {}
        }
        
        python_files = 0
        total_lines = 0
        demo_files = 0
        script_files = 0
        template_files = 0
        
        for root, dirs, files in os.walk('.'):
            # Skip hidden directories and __pycache__
            dirs[:] = [d for d in dirs if not d.startswith('.') and d != '__pycache__']
            
            for file in files:
                filepath = os.path.join(root, file)
                
                if file.endswith('.py'):
                    python_files += 1
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            lines = len(f.readlines())
                            total_lines += lines
                            
                            if file.startswith('demo_'):
                                demo_files += 1
                            elif 'scripts' in root:
                                script_files += 1
                            
                            stats['files'][filepath] = {
                                'lines': lines,
                                'type': 'python'
                            }
                    except:
                        pass
                
                elif file.endswith('.html'):
                    template_files += 1
                    stats['files'][filepath] = {'type': 'template'}
        
        stats['totals'] = {
            'python_files': python_files,
            'total_lines': total_lines,
            'demo_files': demo_files,
            'script_files': script_files,
            'template_files': template_files,
            'avg_lines_per_file': total_lines // python_files if python_files > 0 else 0
        }
        
        # Save statistics
        with open('docs/stats/project_stats.json', 'w') as f:
            json.dump(stats, f, indent=2)
        
        # Generate markdown report
        with open('docs/stats/README.md', 'w') as f:
            f.write(f'''# Project Statistics
        
        Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
        
        ## Overview
        
        - **Total Python Files**: {python_files:,}
        - **Total Lines of Code**: {total_lines:,}
        - **Demo Scripts**: {demo_files}
        - **Core Analysis Scripts**: {script_files}
        - **HTML Templates**: {template_files}
        - **Average Lines per File**: {stats['totals']['avg_lines_per_file']}
        
        ## File Categories
        
        ### Demo Scripts ({demo_files} files)
        Interactive demonstration scripts for different analysis workflows:
        - Single HAR file analysis
        - Two-file performance comparison  
        - Multi-run trend analysis
        
        ### Core Scripts ({script_files} files)
        Production analysis scripts organized by functionality:
        - HAR file parsing and chunking
        - Performance metric extraction
        - Report generation
        
        ### Templates ({template_files} files)
        Professional HTML report templates:
        - Premium single file reports
        - Side-by-side comparison reports
        - Executive multi-run dashboards
        
        ## Quality Metrics
        
        - **Code Organization**: Modular design with clear separation of concerns
        - **Cross-Platform**: Windows, macOS, and Linux compatibility
        - **Dependencies**: Minimal external dependencies (optional Jinja2)
        - **Performance**: Optimized for large HAR file processing (>100MB)
        - **Documentation**: Comprehensive README, examples, and inline docs
        
        ## Development Activity
        
        This project follows professional development practices:
        - Semantic versioning
        - Automated testing with GitHub Actions
        - Code quality monitoring
        - Comprehensive documentation
        - MIT open source license
        ''')
        
        print(f'📊 Generated statistics for {python_files} Python files ({total_lines:,} lines)')
        "
    
    - name: Create documentation index
      run: |
        cat > docs/README.md << 'EOF'
        # HAR-ANALYZE Documentation
        
        Welcome to the comprehensive documentation for HAR-ANALYZE, a professional web performance analysis toolkit.
        
        ## 🚀 Quick Navigation
        
        - **[Getting Started](../README.md#-getting-started)** - Installation and basic usage
        - **[Usage Examples](examples/README.md)** - Step-by-step guides and code examples
        - **[API Documentation](api/README.md)** - Detailed script and function documentation
        - **[Project Statistics](stats/README.md)** - Code metrics and project health
        
        ## 📖 Documentation Sections
        
        ### [Examples](examples/)
        Comprehensive usage examples covering all analysis workflows:
        - Single HAR file analysis with premium reports
        - Performance comparison and regression detection
        - Multi-run trend analysis and executive dashboards
        - Programmatic usage and CI/CD integration
        
        ### [API Reference](api/)
        Technical documentation for all scripts and functions:
        - Core analysis scripts
        - Report generation functions
        - Utility and helper functions
        
        ### [Project Stats](stats/)
        Project metrics and development insights:
        - Code organization and structure
        - File counts and line statistics
        - Quality metrics and best practices
        
        ## 🎯 Key Features
        
        HAR-ANALYZE provides three main analysis workflows:
        
        ### 1. Single File Analysis
        Deep performance analysis of individual HAR files with:
        - Performance grading (GOOD/FAIR/POOR/CRITICAL)
        - Resource breakdown and optimization recommendations
        - Interactive HTML reports with charts and metrics
        
        ### 2. Performance Comparison
        Side-by-side comparison of two HAR files for:
        - Regression detection and impact analysis
        - Resource delta analysis (added, removed, modified)
        - A/B testing and environment comparisons
        
        ### 3. Multi-Run Analysis
        Trend analysis across multiple test runs featuring:
        - Statistical variance and outlier detection
        - Performance consistency metrics
        - Executive dashboards for stakeholders
        
        ## 🛠️ Technical Highlights
        
        - **Python 3.8+** with standard library focus
        - **Cross-platform** Windows, macOS, Linux support
        - **Memory efficient** streaming for large HAR files (>100MB)
        - **Professional templates** with interactive charts
        - **CI/CD ready** with structured JSON output
        - **Open source** MIT license
        
        ## 📊 Performance Standards
        
        The toolkit follows industry-standard performance metrics:
        
        - **Load Time Grading**: Based on Core Web Vitals recommendations
        - **Resource Analysis**: Comprehensive breakdown by type and size
        - **Third-Party Impact**: External service performance assessment
        - **Critical Path**: Render-blocking resource identification
        
        ## 🔗 Additional Resources
        
        - **[Main Repository](https://github.com/Danu28/har-analyzer)** - Source code and issues
        - **[GitHub Actions](../.github/workflows/)** - CI/CD pipeline configuration
        - **[License](../LICENSE)** - MIT License details
        - **[Changelog](../CHANGELOG.md)** - Version history and updates
        
        ---
        
        **Built for performance engineers, developers, and anyone who cares about web performance.**
        
        For questions or contributions, visit our [GitHub repository](https://github.com/Danu28/har-analyzer).
        EOF
    
    - name: List generated documentation
      run: |
        echo "📚 Generated documentation structure:"
        find docs -type f -name "*.md" -o -name "*.json" | sort
        
        echo ""
        echo "📄 Documentation files created:"
        ls -la docs/
        ls -la docs/*/
    
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/
        retention-days: 30
