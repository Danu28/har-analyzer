name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. Line length set to 88 (black default)
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Test script imports
      run: |
        python -c "import sys; sys.path.append('scripts'); import break_har_for_single_analysis"
        python -c "import sys; sys.path.append('scripts'); import analyze_single_har_performance"
        python -c "import sys; sys.path.append('scripts'); import generate_single_har_report"
    
    - name: Test demo scripts syntax
      run: |
        python -m py_compile demo_single_file_report.py
        python -m py_compile demo_har_comparison.py
        python -m py_compile demo_multi_run_selector.py
    
    - name: Run basic functionality tests
      run: |
        # Test with sample HAR file if exists
        if [ -f "HAR-Files/test_data_accuracy.har" ]; then
          python demo_single_file_report.py --test-mode
        fi
      shell: bash
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install safety bandit
    
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --file requirements.txt
    
    - name: Run bandit security linter
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: bandit-report.json

  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install memory-profiler
    
    - name: Performance benchmark
      run: |
        # Create a simple performance test
        echo "Testing memory usage and processing time..."
        python -c "
        import time
        import psutil
        import os
        
        # Monitor memory usage
        process = psutil.Process(os.getpid())
        start_memory = process.memory_info().rss / 1024 / 1024  # MB
        start_time = time.time()
        
        # Simulate HAR processing
        print(f'Initial memory: {start_memory:.2f} MB')
        print(f'Process started at: {time.ctime(start_time)}')
        
        # Basic performance check
        end_time = time.time()
        end_memory = process.memory_info().rss / 1024 / 1024  # MB
        
        print(f'Final memory: {end_memory:.2f} MB')
        print(f'Memory increase: {end_memory - start_memory:.2f} MB')
        print(f'Execution time: {end_time - start_time:.2f} seconds')
        
        # Performance targets from coding instructions
        if end_memory - start_memory > 512:
            print('WARNING: Memory usage exceeds 512MB target')
        else:
            print('âœ“ Memory usage within target')
        "
